install.packages(c("BiocManager", "ggplot2", "reshape2.", "tidyverse", "dplyr", "ggpubr", "ggvenn", "pheatmap", "openxlsx2"))
install.packages(c('googledrive', 'googlesheets4', 'httr', 'ragg', 'rvest', 'xml2'))
install.packages(c("BiocManager", "ggplot2", "reshape2.", "tidyverse", "dplyr", "ggpubr", "ggvenn", "pheatmap", "openxlsx2"))
install.packages(c("BiocManager", "ggplot2", "reshape2.", "tidyverse", "dplyr", "ggpubr", "ggvenn", "pheatmap", "openxlsx2"))
install.packages("~/Downloads/ragg_1.4.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/textshaping_1.0.1.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/textshaping_1.0.1.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/ragg_1.4.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/ragg_1.4.0.tar.gz", repos = NULL, type = "source")
install.packages(c("tidyverse", "reshape"))
install.packages(c("shiny", "shinydashboard"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChAMP")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChAMP")
install.packages("~/Downloads/kpmt_0.1.0.tar.gz", repos = NULL, type = "source")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChAMP")
library(ChAMP)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("mixOmics")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
install.packages("gprofiler2")
library(ChAMP)
library(ggplot2)
library(limma)
library(ENmix)
myLoad<-champ.load(directory = "/run/media/saadat/Expansion/WT_Paper/Adrenocortical/GSE131350_RAW/",
method="minfi",
methValue="B",
autoimpute=TRUE,
filterDetP=TRUE,
ProbeCutoff=0,
SampleCutoff=0.1,
detPcut=0.01,
filterBeads=TRUE,
beadCutoff=0.05,
filterNoCG=TRUE,
filterSNPs=TRUE,
population=NULL,
filterMultiHit=TRUE,
filterXY=TRUE,
force=FALSE,
arraytype="EPIC")
myNorm<-champ.norm(beta=myLoad$beta,
resultsDir="./CHAMP_Normalization/",
method="BMIQ",
plotBMIQ=TRUE,
arraytype="EPIC",
cores=6)
myPD<- myLoad$pd
rm(myLoad)
gc()
#save.image("/run/media/saadat/A/PhD_Thesis/TARGET_DATA_Selected.RData")
mVal<-B2M(myNorm)
unique(myPD$Sample_Group)
group <- factor(myPD$Sample_Group, levels = c("Control", "Tumor"))
design <- model.matrix(~0+group)
fit <- lmFit(mVal, design, method = "ls")
colnames(design)
contrast.matrix <- makeContrasts(groupTumor - groupControl,  levels=colnames(design))
fit2 <- contrasts.fit(fit, contrasts =  contrast.matrix)
fit2 <- eBayes(fit2)
myPD$Sample_Group
meanDiff <- rowMeans(myNorm[49:60,]) - rowMeans(myNorm[1:48,])
library(tidyverse)
DMPs <- topTable(fit2 ,  number = nrow(fit2) ,adjust.method="fdr", sort.by="p", p.value=0.001, coef = 1)
head(DMPs)
head(meanDiff)
meanDiff <- rowMeans(myNorm[49:60,]) - rowMeans(myNorm[1:48,]) %>%
. > 0.3
meanDiff <- rowMeans(myNorm[49:60,]) - rowMeans(myNorm[1:48,]) %>%
meanDiff = meanDiff > 0.3
meanDiff <- rowMeans(myNorm[49:60,]) - rowMeans(myNorm[1:48,])
meanDiff = meanDiff > 0.3
DMPs <- topTable(fit2 ,  number = nrow(fit2) ,adjust.method="fdr", sort.by="p", p.value=0.001, coef = 1) %>%
dplyr::filter(., rownames(.) %in% names(meanDiff))
dim(DMPs)
DMPs <- topTable(fit2 ,  number = nrow(fit2) ,adjust.method="fdr", sort.by="p", p.value=0.001, coef = 1)
dim(DMPs)
meanDiff
meanDiff = meanDiff > 0.1
length(meanDiff)
meanDiff <- rowMeans(myNorm[49:60,]) - rowMeans(myNorm[1:48,])
head(meanDiff)
head(names(meanDiff[abs(meanDiff > 0.3)]))
length(names(meanDiff[abs(meanDiff > 0.3)]))
length(names(meanDiff[abs(meanDiff >= 0.3)]))
length(names(meanDiff[abs(meanDiff} >= 0.3]))
length(names(meanDiff[abs(meanDiff) >= 0.3]))
meanDiff[abs(meanDiff) >= 0.3]
meanDiff[abs(meanDiff) >= 0.1]
meanDiff <- rowMeans(myNorm[,49:60]) - rowMeans(myNorm[,1:48])
length(names(meanDiff[abs(meanDiff) >= 0.3]))
dplyr::filter(., rownames(.) %in% names(meanDiff[abs(meanDiff) >= 0.3]))
DMPs <- topTable(fit2 ,  number = nrow(fit2) ,adjust.method="fdr", sort.by="p", p.value=0.001, coef = 1) %>%
dplyr::filter(., rownames(.) %in% names(meanDiff[abs(meanDiff) >= 0.3]))
DMPs
WT.signature <- read.csv("../Franc8900.txt")
WT.signature
WT.signature <- read.csv("../Franc8900.txt", header = F, sep = "\t")
WT.signature
WT.signature <- read.csv("../Franc8900.txt", header = F, sep = "\t") %>%
dplyr::select("V1")
WT.signature
install.packages("ggvenn")
genes <- list(WT = WT.signature$V1, ACC = rownames(DMPs))
ggvenn(genes, fill_color = c( "#5733FF","#CC6677"))
library(ggvenn)
ggvenn(genes, fill_color = c( "#5733FF","#CC6677"))
write.csv(DMPs, file = "ACC_DMP.csv", quote = T, row.names = T)
BiocManager::install("GEOquery")
library(GEOquery)
?GEOquery
??GEOquery
HPB <- GEOquery::getGEO("GSE132399")
library(ChAMPdata)
install.packages("git2r")
library(git2r)
setwd("/run/media/saadat/A/GIMP/")
library(devtools)
devtools::install()
BiocCheck::BiocCheck()
library(BiocCheck)
BiocCheck()
BiocCheck()
BiocCheck()
library(roxygen2)
roxygenize()
BiocCheck()
